"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const find_up_1 = __importDefault(require("find-up"));
const lodash_merge_1 = __importDefault(require("lodash.merge"));
const try_require_1 = __importDefault(require("try-require"));
const log_1 = require("./log");
const CONFIG_FILE = 'test-environment.config.js';
exports.DEFAULT_BLOCK_GAS_LIMIT = 8e6;
const defaultConfig = {
    accounts: {
        amount: 10,
        ether: 100,
    },
    contracts: {
        type: 'truffle',
        defaultGas: exports.DEFAULT_BLOCK_GAS_LIMIT * 0.75,
        defaultGasPrice: 20e9,
        artifactsDir: 'build/contracts',
    },
    blockGasLimit: exports.DEFAULT_BLOCK_GAS_LIMIT,
    gasPrice: 20e9,
    setupProvider: (baseProvider) => __awaiter(void 0, void 0, void 0, function* () { return baseProvider; }),
    coverage: false,
};
function getConfig() {
    const location = find_up_1.default.sync(CONFIG_FILE, { type: 'file' });
    const providedConfig = location !== undefined && fs_1.default.existsSync(location) ? require(location) : {};
    const config = lodash_merge_1.default(defaultConfig, providedConfig);
    if (process.env.OZ_TEST_ENV_COVERAGE !== undefined) {
        const coveragePath = try_require_1.default.resolve('ganache-core-coverage');
        if (coveragePath === undefined) {
            throw new Error(`Package 'ganache-core-coverage' is required for coverage runs.`);
        }
        log_1.log('Running on coverage mode: overriding some configuration values');
        config.coverage = true;
        // Solidity coverage causes transactions to require much more gas. We need to:
        //  1. increase the block gas limit so that transactions don't go over it
        //  2. increase how much gas transactions send by default
        //  3. reduce the gas price to prevent the account's funds from being affected by this too much
        config.blockGasLimit = 0xfffffffffffff;
        config.contracts.defaultGas = config.blockGasLimit * 0.75;
        config.contracts.defaultGasPrice = 1;
        config.gasPrice = 1;
    }
    return config;
}
exports.default = getConfig();
//# sourceMappingURL=config.js.map