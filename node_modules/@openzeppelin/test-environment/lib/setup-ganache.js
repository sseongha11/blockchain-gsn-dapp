"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const accounts_1 = require("./accounts");
const config_1 = __importDefault(require("./config"));
function default_1() {
    return __awaiter(this, void 0, void 0, function* () {
        const server = child_process_1.fork(path_1.default.join(__dirname, 'ganache-server'), [], {
            // Prevent the child process from also being started in inspect mode, which
            // would cause issues due to parent and child sharing the port.
            // See https://github.com/OpenZeppelin/openzeppelin-test-environment/pull/23
            execArgv: process.execArgv.filter(opt => opt !== '--inspect')
        });
        const options = {
            accountsConfig: accounts_1.accountsConfig,
            gasLimit: config_1.default.blockGasLimit,
            gasPrice: config_1.default.gasPrice,
            coverage: config_1.default.coverage,
        };
        server.send(options);
        const messageReceived = new Promise((resolve) => {
            return server.once('message', resolve);
        });
        const message = yield messageReceived;
        switch (message.type) {
            case 'ready':
                if (server.channel) {
                    server.channel.unref();
                }
                server.unref();
                return `http://localhost:${message.port}`;
            case 'error':
                server.kill();
                throw new Error('Unhandled server error');
            default:
                throw new Error(`Uknown server message: '${message}'`);
        }
    });
}
exports.default = default_1;
//# sourceMappingURL=setup-ganache.js.map