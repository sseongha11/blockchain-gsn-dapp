"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const p_queue_1 = __importDefault(require("p-queue"));
const web3_1 = __importDefault(require("web3"));
const setup_ganache_1 = __importDefault(require("./setup-ganache"));
const config_1 = __importDefault(require("./config"));
class TestProvider {
    constructor() {
        this.sendAsync = this.send.bind(this);
        this.queue = new p_queue_1.default({ concurrency: 1 });
        this.queue.add(() => __awaiter(this, void 0, void 0, function* () {
            // Setup node
            const url = yield setup_ganache_1.default();
            // Create base provider (connection to node)
            const baseProvider = new web3_1.default(url).eth.currentProvider;
            // Create a custom provider (e.g. GSN provider) and wrap it
            this.wrappedProvider = yield config_1.default.setupProvider(baseProvider);
        }));
    }
    send(payload, callback) {
        this.queue.onIdle().then(() => {
            // wrapped provider is always not a null due to PQueue running the provider initialization
            // before any send calls yet TypeScript can't possibly knows that
            this.wrappedProvider && this.wrappedProvider.send(payload, callback);
        });
    }
}
exports.default = TestProvider;
//# sourceMappingURL=test-provider.js.map